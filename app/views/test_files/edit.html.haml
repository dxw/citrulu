.row
  #test_suite.span8
    
    = form_for(@test_file, :remote => true, :html => {:id => "editor_form"}) do |f|
      .row
        %h1.span4
          %span.editable{"data-id" => @test_file.id}><
            =@test_file.name
        #save_btn.span4
          %span#editor_status=@status_msg
          = f.submit "Save now", :class => "btn btn-primary"
      = f.text_area :test_file_text, :id => "editor_content"
 
    %section#console
      %h3 Console
    
      %div.output=console_line({:welcome => @console_output})
  #help.span4
    #liveview
      %h2 Live view
      %div.outline
        %div.group
          %div.pending{:class=> "liveview-row"} Edit a page to preview its results here
        %div.buttons


    %header.section_title
      %h2 Help
    =accordion("help_sections",:h3) do
      =accordion_group("overview", true) do
        =accordion_heading do
          Overview
        =accordion_body do
          %p Citrulu's syntax is very simple. 
          %p First, decide which pages you would like to test. Then, add each page with at least one assertion:
          %pre.editor-code="On http://example.com\n  I should see Welcome to this site"
          %p You can add as many pages as you like, and as many tests as you like under each assertion. 
          %p For more information on specific assertions, expand the section below.
      
      =accordion_group("i_should_see") do
        =accordion_heading do
          Assertions
        =accordion_body do
          %p Assertions allow you to specify conditions that must be true in order for your test to pass.

          %h4 I should see
          %p This assertion retrieves a page and looks for text without looking at HTML tags. So, the following assertion:
          %pre.editor-code="  I should see Hello, world!"
          %p Would match all of:
          %pre="Hello, world!"
          %pre="<strong>Hello</strong> world!"
          %pre="Hello,<br>world!"

          %h4 Source should contain
          %p This assertion retrieves a page and looks for text in its source code. So, the following assertion:
          %pre.editor-code="  Source should contain <strong>Hello</strong>, world!"
          %p Would match:
          %pre="Hello is bold: <strong>Hello</strong> world! Bold text is great!"
      
          %h4 Header should contain
          %p This assertion retrieves the headers of a page and looks for a header with the name you specify. So, the following assertion:
          %pre.editor-code="  Headers should include X-Varnish"
          %p Would match:
          %pre="X-Varnish: 128371292"
          %p But would not match:
          %pre="X-Varnish-assertion: miss"

      -#=accordion_group("predefines") do
        =accordion_heading do
          Predefines
        =accordion_body do
          %p Predefines give you quick access to commonly-used lists of strings. For example, many people add a test to assert that no erroneous PHP output is present in their code.
          %p You can use predefines by using a colon followed by the name of the predefine as your value:
          %pre.editor-code="  I should not see :php_errors"
          %p See a bit further down this page for a list of the predefines you can use.
    
      =accordion_group("first_finally") do
        =accordion_heading do
          First &amp; Finally
        =accordion_body do
          %p First and Finally allow you to write scripts on your site that will be executed before and after we retrieve the page being tested.
          %p For example, you could use these scripts to log into and out of a members-only site.
          %p If used, First and Finally must be the first two lines in the test group:
          %pre.editor-code.scrolling="On http://example.com\n  First, fetch http://example.com/22ebd/first-script\n  Finally, fetch http://example.com/22ebd/finally-script\n  I should see You are now logged in"
          %p You don't have to use both first and finally: you can use either one by itself.

      =accordion_group("general_tips") do 
        =accordion_heading do
          General tips
        =accordion_body do
          %p We haven't written any tips yet.
    %header.section_title
      %h2 Predefines
    =accordion("predefines", :h3) do
      -@predefs.each do |predef, values|
        =accordion_group(predef.to_sym) do
          = accordion_heading do
            = ":#{predef}"
          = accordion_body do
            %ul
              - values.each do |value|
                %li=value
