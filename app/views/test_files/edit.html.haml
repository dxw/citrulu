.row
  %header.span8
    %h1=@test_file.name

.row
  #test_suite.span8
    
    = form_for(@test_file, :remote => true, :html => {:id => "editor_form"}) do |f|
      #save_btn
        = f.submit "Save now", :class => "btn btn-primary"
        #editor_status=@status_msg
      = f.text_area :test_file_text, :id => "editor_content"
      #editor_wrapper 
        - #infuriating div required (?) to deal with the fact that the #editor element has no size 
        #editor
          Sorry the editor could not be loaded
 
    %section#console
      %h3 Console
    
      %div.output=console_line({:welcome => @console_output})
      
  #help.span4
    %header.section_title
      %h2 Help
    =accordion("help_sections",:h3) do
      =accordion_group("overview", true) do
        =accordion_heading do
          Overview
        =accordion_body do
          %p Citrulu's syntax is very simple. 
          %p First, decide which URLs you would like to test. Then, add each URL with at least one test:
          %pre="On http://example.com\n  I should see Welcome to this site"
          %p You can add as many URLs as you like, and as many tests as you like under each URL. 
          %p For more information on specific tests, expand the section below.
      
      =accordion_group("i_should_see") do
        =accordion_heading do
          I should see
        =accordion_body do
          %p This check retrieves a page and looks for text without looking at HTML tags. So, the following check:
          %pre="  I should [not] see Hello, world!"
          %p Would match all of:
          %pre="Hello, world!"
          %pre="<strong>Hello</strong> world!"
          %pre="Hello,<br>world!"

      =accordion_group("source_should_contain") do  
        =accordion_heading do
          Source should [not] contain
        =accordion_body do
          %p This check retrieves a page and looks for text in its source code. So, the following check:
          %pre="  I should see <strong>Hello</strong>, world!"
          %p Would match:
          %pre="Hello is bold: <strong>Hello</strong> world! Bold text is great!"
      
      =accordion_group("headers_should_include") do  
        =accordion_heading do
          Headers should [not] include
        =accordion_body do
          %p This check retrieves the headers of a page and looks for a header with the name you specify. So, the following check:
          %pre="  Headers should include X-Varnish"
          %p Would match:
          %pre="X-Varnish: 128371292"
          %p But would not match:
          %pre="X-Varnish-Check: miss"
          %p At the moment, you can only check for the presence or absence of headers. We might add the ability to check header values in a future release.

      =accordion_group("predefines") do
        =accordion_heading do
          Predefines
        =accordion_body do
          %p Predefines give you quick access to commonly-used lists of strings. For example, many people add a test to check that no erroneous PHP output is present in their code.
          %p You can use predefines by using the an equals sign followed by the name of the predefine as your value:
          %pre="  I should not see :php_errors"
          %p See a bit further down this page for a list of the predefines you can use
    
      =accordion_group("general_tips") do 
        =accordion_heading do
          General tips
        =accordion_body do
          %ul
            %li Citrulu is case sensitive! So make sure your lines are capitalised.
    %header.section_title
      %h2 Predefines
    =accordion("predefines", :h3) do
      -@predefs.each do |predef, values|
        =accordion_group(predef.to_sym) do
          = accordion_heading do
            = ":#{predef}"
          = accordion_body do
            %ul
              - values.each do |value|
                %li=value
