- if cookies["hide_welcome_#{current_user.id}".to_sym].blank?
  .welcome.hero-unit{:id => "welcome_#{current_user.id}"}
    %h1 Welcome to Citrulu
    %a.dismiss{:href => '#'} Hide this message
    .row
      .dismiss
      .span5
        %p Citrulu is a new tool to help you keep your websites running, and to respond quickly when they break.
        %p Citrulu lets you write tests for your websites using simple, natural language.
        %p After you've written your tests, we'll run them every hour and let you know if anything fails.
      .span4.offset1
        %p We've created a set of tutorial test files to help you get to grips with Citrulu's super-simple syntax.
        - if current_user.first_tutorial
          %p 
            %a.btn.btn-primary.get-testing{:href => edit_test_file_path(current_user.first_tutorial)} Start the tutorial
        - else
          %em
            The first tutorial file seems to have been deleted - please 
            = mail_to 'contact@citrulu.com', "send us an email"
            if you'd like us to re-generate it for you. 
        
.row
  #test_list.span8
    .title
      %h2 Your tests
      =link_to test_files_path, {:class => 'btn', method: :post} do
        %i.icon-plus-sign
        Create a new test file
    %ul#test_files.unstyled
      %li#no_test_files.test_file{style: "display: none"}
        =render partial: 'no_test_files'
      
      - @test_files.each do |file|
        %li.test_file{ :id => "test_file#{file.id}" }
          .row
            .span7
              %a.btn.test_file_btn{:href => edit_test_file_path(file)}
                %span.name=file.name
                .row-fluid
                  .span7
                    %span.last_updated="Last updated at #{file.updated_at}"
                  .span5
                    %span.file_info
                      -if file.compiled?
                        =pluralize(file.number_of_tests, 'assertion')
                        on 
                        =pluralize(file.number_of_pages, 'page')
                      -else
                        Your file hasn't been compiled yet.
                        Click to edit it and kick it off.
            .span1
              =link_to test_file_path(file), {:class => "btn btn-danger", method: :delete, remote: true, confirm: "Are you sure you want to delete this test file? We'll keep the related test results, but you won't be able to bring it back."} do
                %span Delete
                %i.icon-remove-sign.icon-white
      
  #sidebar.span4
    #recent_results
      - if (@recent_failed_assertions + @recent_failed_pages) != 0
        .fail
          %div
            %img{:src => "http://placehold.it/60x66"}
            %p= "#{pluralize(@recent_failed_assertions, 'assertion is')} failing"
            -# N.B. this pluralization is (nescessarily) achieved with a custom inflector in /config/initializers/inflectins.rb
            %p= "#{pluralize(@recent_failed_pages, 'page')} could not be retrieved"
          %a.btn{:href => test_runs_path} View full results
      - else
        .pass
          %div
            %img{:src => "http://placehold.it/60x66"}
            -if @test_files.collect{|f| f.last_run}.compact.empty?
              %p Your tests haven't been run yet.
            - else
              %p Your tests all pass. Huzzah!
          %a.btn{:href => test_runs_path} You can see results, but nowt's going on

-#sexy_stats
  .row
    %h3.span12 Stats, for your reading pleasure
  .row
    .stat.span2
      %img{:src => "http://placehold.it/25x50"}
      %p You've got <strong>#{pluralize(current_user.test_files.count, 'test file')}</strong>
    / - if current_user.test_files.first.compiled?
    /   .stat.span2
    /     %img{:src => "http://placehold.it/25x50"}
    /     %p Testing <strong>#{pluralize(current_user.test_files.first.number_of_pages, 'page')}</strong>
    /   .stat.span2
    /     %img{:src => "http://placehold.it/25x50"}
    /     %p Checking <strong>#{pluralize(current_user.test_files.first.number_of_tests, 'condition')}</strong>
    /   .stat.span2
    /     %img{:src => "http://placehold.it/25x50"}
    /     %p On average, checking <strong>#{pluralize(current_user.test_files.first.number_of_tests/current_user.test_files.first.number_of_pages, 'condition')}</strong> per page
    / - if current_user.test_files.first.test_runs.size != 0
    /   .stat.span2
    /     %img{:src => "http://placehold.it/25x50"}
    /     %p In a typical test run, <strong>#{pluralize(current_user.test_files.first.average_failures_per_run, 'page')}</strong>  fail
    /   .stat.span2
    /     %img{:src => "http://placehold.it/25x50"}
    /     %p
    /       On average, failing pages are fixed within 
    /       %strong#{distance_of_time_in_words(Time.now, Time.now + current_user.test_files.first.average_fix_speed.seconds)}




