- if cookies["hide_welcome_#{current_user.id}".to_sym].blank?
  .welcome.hero-unit{:id => "welcome_#{current_user.id}"}
    %h1 Welcome to Citrulu
    %a.dismiss{:href => '#'} Hide this message
    .row
      .dismiss
      .span5
        %p Citrulu is a new tool to help you keep your websites running, and to respond quickly when they break.
        %p Citrulu lets you write tests for your websites using simple, natural language.
        %p After you've written your tests, we'll run them every hour and let you know if anything fails.
      .span4.offset1
        %p We've created a set of tutorial test files to help you get to grips with Citrulu's super-simple syntax.
        - if current_user.first_tutorial
          %p 
            %a.btn.btn-primary.get-testing{:href => edit_test_file_path(current_user.first_tutorial)} Start the tutorial
        - else
          %em
            The first tutorial file seems to have been deleted - please 
            = mail_to 'contact@citrulu.com', "send us an email"
            if you'd like us to re-generate it for you. 
        
.row
  #test_list.span8
    .title
      %h2 Your tests
      =link_to test_files_path, {:class => 'btn', method: :post} do
        %i.icon-plus-sign
        Create a new test file
    %ul#test_files.unstyled
      %li#no_test_files.test_file{style: "display: none"}
        =render partial: 'no_test_files'
      =render @test_files
      
  #sidebar.span4
    #recent_results
      - if (@recent_failed_assertions + @recent_failed_pages) != 0
        .fail
          %div
            %p= "#{pluralize(@recent_failed_assertions, 'assertion is')} failing"
            -# N.B. this pluralization is (nescessarily) achieved with a custom inflector in /config/initializers/inflectins.rb
            %p= "#{pluralize(@recent_failed_pages, 'page')} could not be retrieved"
          %a.btn{:href => test_runs_path} View full results
      - else
        .pass
          %div
            -if @test_files.collect{|f| f.last_run}.compact.empty?
              %p Your tests haven't been run yet.
            - else
              %p Your tests all pass. Huzzah!
          %a.btn{:href => test_runs_path} You can see results, but nowt's going on
    
    - if @number_of_test_runs  > 0
      %section.well.stats
        %header
          %h3 Summary:
        %p In the past week we've:
        %ul.unstyled
          %li run your tests #{ pluralize(@number_of_test_runs, "time") }
          %li checked #{ pluralize(@number_of_urls, "url") }
            
    
    - unless @page_response_times.blank?
      %section.well.stats
        %header
          %h3 Average page load times:
          %em (based on the past week)
        %ul.unstyled
          - @page_response_times.keys.sort.each do |url|
            %li.row-fluid
              .span9.url= url
              .span3.response_time= "#{@page_response_times[url] }ms"
              -# needs to be this size in order to prevent nasty wrapping

    %section.well.stats
      - if @urls_with_failures_in_past_week.blank?
        %header
          %h3 No failures in the past week :)
      - else
        %header
          %h3 Pages with failures:
          %em (in the past week)
        %ul.unstyled
          - @urls_with_failures_in_past_week.keys.sort.each do |url|
            %li.row-fluid
              .span9.url=truncated_test_url(url, 15)
              .span3.number_of_failures=pluralize(@urls_with_failures_in_past_week[url], 'time')
              
    %section.well.stats
      - if @urls_with_failures_in_past_week.blank?
        %header
          %h3 No failures in the past week :)
      - else
        %header
          %h3 Domain failure rates:
          %em (in the past week)
        %ul.unstyled
          - current_user.domains_list.each do |domain|
            %li.row-fluid
              .span9= truncated_test_url(domain[:domain], 15)
              .span3= number_to_percentage(domain[:failure_rate], precision: 0)
      
        
-#sexy_stats
  .row
    %h3.span12 Stats, for your reading pleasure
  .row
    .stat.span2
      %img{:src => "http://placehold.it/25x50"}
      %p You've got <strong>#{pluralize(current_user.test_files.count, 'test file')}</strong>
    / - if current_user.test_files.first.compiled?
    /   .stat.span2
    /     %img{:src => "http://placehold.it/25x50"}
    /     %p Testing <strong>#{pluralize(current_user.test_files.first.number_of_pages, 'page')}</strong>
    /   .stat.span2
    /     %img{:src => "http://placehold.it/25x50"}
    /     %p Checking <strong>#{pluralize(current_user.test_files.first.number_of_tests, 'condition')}</strong>
    /   .stat.span2
    /     %img{:src => "http://placehold.it/25x50"}
    /     %p On average, checking <strong>#{pluralize(current_user.test_files.first.number_of_tests/current_user.test_files.first.number_of_pages, 'condition')}</strong> per page
    / - if current_user.test_files.first.test_runs.size != 0
    /   .stat.span2
    /     %img{:src => "http://placehold.it/25x50"}
    /     %p In a typical test run, <strong>#{pluralize(current_user.test_files.first.average_failures_per_run, 'page')}</strong>  fail
    /   .stat.span2
    /     %img{:src => "http://placehold.it/25x50"}
    /     %p
    /       On average, failing pages are fixed within 
    /       %strong#{distance_of_time_in_words(Time.now, Time.now + current_user.test_files.first.average_fix_speed.seconds)}




