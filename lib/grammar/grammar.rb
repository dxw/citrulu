# Autogenerated from a Treetop grammar. Edits may be lost.


module TesterGrammar
  include Treetop::Runtime

  def root
    @root ||= :test_file
  end

  def _nt_test_file
    start_index = index
    if node_cache[:test_file].has_key?(index)
      cached = node_cache[:test_file][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_test_group
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(TestFile,input, i0...index, s0)
    end

    node_cache[:test_file][start_index] = r0

    r0
  end

  module TestGroup0
    def page_clause
      elements[0]
    end

    def single_assertion
      elements[1]
    end

    def space
      elements[3]
    end
  end

  def _nt_test_group
    start_index = index
    if node_cache[:test_group].has_key?(index)
      cached = node_cache[:test_group][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_page_clause
    s0 << r1
    if r1
      r2 = _nt_single_assertion
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          r4 = _nt_test_line
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s0 << r3
        if r3
          r5 = _nt_space
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(TestGroup,input, i0...index, s0)
      r0.extend(TestGroup0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:test_group][start_index] = r0

    r0
  end

  module PageClause0
    def comment
      elements[0]
    end

  end

  def _nt_page_clause
    start_index = index
    if node_cache[:page_clause].has_key?(index)
      cached = node_cache[:page_clause][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_comment
    s0 << r1
    if r1
      r3 = _nt_so_clause
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        i4 = index
        r5 = _nt_on_clause
        if r5
          r4 = r5
        else
          r6 = _nt_when_clause
          if r6
            r4 = r6
          else
            @index = i4
            r4 = nil
          end
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(PageClause,input, i0...index, s0)
      r0.extend(PageClause0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:page_clause][start_index] = r0

    r0
  end

  module SoClause0
    def space
      elements[0]
    end

    def required_value
      elements[2]
    end
  end

  def _nt_so_clause
    start_index = index
    if node_cache[:so_clause].has_key?(index)
      cached = node_cache[:so_clause][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_space
    s0 << r1
    if r1
      if has_terminal?("So I know that", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 14))
        @index += 14
      else
        terminal_parse_failure("So I know that")
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_required_value
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SoClause,input, i0...index, s0)
      r0.extend(SoClause0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:so_clause][start_index] = r0

    r0
  end

  module OnClause0
    def comment
      elements[0]
    end

    def space1
      elements[1]
    end

    def space2
      elements[3]
    end

    def url
      elements[4]
    end
  end

  def _nt_on_clause
    start_index = index
    if node_cache[:on_clause].has_key?(index)
      cached = node_cache[:on_clause][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_comment
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        if has_terminal?("On", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("On")
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_space
          s0 << r4
          if r4
            r5 = _nt_url
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(OnClause,input, i0...index, s0)
      r0.extend(OnClause0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:on_clause][start_index] = r0

    r0
  end

  module WhenClause0
    def comment
      elements[0]
    end

    def space1
      elements[1]
    end

    def space2
      elements[4]
    end

    def url
      elements[5]
    end
  end

  def _nt_when_clause
    start_index = index
    if node_cache[:when_clause].has_key?(index)
      cached = node_cache[:when_clause][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_comment
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        if has_terminal?("When I", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 6))
          @index += 6
        else
          terminal_parse_failure("When I")
          r3 = nil
        end
        s0 << r3
        if r3
          i4 = index
          r5 = _nt_method_data
          if r5
            r4 = r5
          else
            r6 = _nt_method
            if r6
              r4 = r6
            else
              @index = i4
              r4 = nil
            end
          end
          s0 << r4
          if r4
            r7 = _nt_space
            s0 << r7
            if r7
              r8 = _nt_url
              s0 << r8
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(WhenClause,input, i0...index, s0)
      r0.extend(WhenClause0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:when_clause][start_index] = r0

    r0
  end

  module MethodData0
    def space1
      elements[0]
    end

    def space2
      elements[2]
    end

    def quoted_value
      elements[3]
    end

    def space3
      elements[4]
    end

  end

  def _nt_method_data
    start_index = index
    if node_cache[:method_data].has_key?(index)
      cached = node_cache[:method_data][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_space
    s0 << r1
    if r1
      i2 = index
      if has_terminal?("put", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("put")
        r3 = nil
      end
      if r3
        r2 = r3
      else
        if has_terminal?("post", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure("post")
          r4 = nil
        end
        if r4
          r2 = r4
        else
          @index = i2
          r2 = nil
        end
      end
      s0 << r2
      if r2
        r5 = _nt_space
        s0 << r5
        if r5
          r6 = _nt_quoted_value
          s0 << r6
          if r6
            r7 = _nt_space
            s0 << r7
            if r7
              if has_terminal?("to", false, index)
                r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure("to")
                r8 = nil
              end
              s0 << r8
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(MethodData,input, i0...index, s0)
      r0.extend(MethodData0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:method_data][start_index] = r0

    r0
  end

  module Method0
    def space
      elements[0]
    end

  end

  def _nt_method
    start_index = index
    if node_cache[:method].has_key?(index)
      cached = node_cache[:method][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_space
    s0 << r1
    if r1
      i2 = index
      if has_terminal?("head", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure("head")
        r3 = nil
      end
      if r3
        r2 = r3
      else
        if has_terminal?("get", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure("get")
          r4 = nil
        end
        if r4
          r2 = r4
        else
          if has_terminal?("delete", false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 6))
            @index += 6
          else
            terminal_parse_failure("delete")
            r5 = nil
          end
          if r5
            r2 = r5
          else
            @index = i2
            r2 = nil
          end
        end
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Method,input, i0...index, s0)
      r0.extend(Method0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:method][start_index] = r0

    r0
  end

  module SingleAssertion0
  end

  def _nt_single_assertion
    start_index = index
    if node_cache[:single_assertion].has_key?(index)
      cached = node_cache[:single_assertion][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_first_clause
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r4 = _nt_finally_clause
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SingleAssertion,input, i0...index, s0)
      r0.extend(SingleAssertion0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:single_assertion][start_index] = r0

    r0
  end

  module FirstClause0
    def comment
      elements[0]
    end

    def space
      elements[1]
    end

    def url
      elements[3]
    end
  end

  def _nt_first_clause
    start_index = index
    if node_cache[:first_clause].has_key?(index)
      cached = node_cache[:first_clause][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_comment
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        if has_terminal?("First, fetch ", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 13))
          @index += 13
        else
          terminal_parse_failure("First, fetch ")
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_url
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(FirstClause,input, i0...index, s0)
      r0.extend(FirstClause0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:first_clause][start_index] = r0

    r0
  end

  module FinallyClause0
    def comment
      elements[0]
    end

    def space
      elements[1]
    end

    def url
      elements[3]
    end
  end

  def _nt_finally_clause
    start_index = index
    if node_cache[:finally_clause].has_key?(index)
      cached = node_cache[:finally_clause][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_comment
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        if has_terminal?("Finally, fetch ", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 15))
          @index += 15
        else
          terminal_parse_failure("Finally, fetch ")
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_url
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(FinallyClause,input, i0...index, s0)
      r0.extend(FinallyClause0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:finally_clause][start_index] = r0

    r0
  end

  module TestLine0
    def test
      elements[0]
    end

    def comment
      elements[1]
    end
  end

  def _nt_test_line
    start_index = index
    if node_cache[:test_line].has_key?(index)
      cached = node_cache[:test_line][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_test
    s0 << r1
    if r1
      r2 = _nt_comment
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(TestLine,input, i0...index, s0)
      r0.extend(TestLine0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:test_line][start_index] = r0

    r0
  end

  module Test0
    def comment
      elements[0]
    end

    def space
      elements[1]
    end

  end

  def _nt_test
    start_index = index
    if node_cache[:test].has_key?(index)
      cached = node_cache[:test][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_comment
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        i3 = index
        r4 = _nt_complex_assertion
        if r4
          r3 = r4
        else
          r5 = _nt_simple_assertion
          if r5
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(Test,input, i0...index, s0)
      r0.extend(Test0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:test][start_index] = r0

    r0
  end

  module SimpleAssertion0
    def space
      elements[1]
    end

    def parameter
      elements[2]
    end
  end

  def _nt_simple_assertion
    start_index = index
    if node_cache[:simple_assertion].has_key?(index)
      cached = node_cache[:simple_assertion][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?("Source should contain", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 21))
      @index += 21
    else
      terminal_parse_failure("Source should contain")
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?("Source should not contain", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 25))
        @index += 25
      else
        terminal_parse_failure("Source should not contain")
        r3 = nil
      end
      if r3
        r1 = r3
      else
        if has_terminal?("I should see", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 12))
          @index += 12
        else
          terminal_parse_failure("I should see")
          r4 = nil
        end
        if r4
          r1 = r4
        else
          if has_terminal?("I should not see", false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 16))
            @index += 16
          else
            terminal_parse_failure("I should not see")
            r5 = nil
          end
          if r5
            r1 = r5
          else
            if has_terminal?("Headers should include", false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 22))
              @index += 22
            else
              terminal_parse_failure("Headers should include")
              r6 = nil
            end
            if r6
              r1 = r6
            else
              if has_terminal?("Headers should not include", false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 26))
                @index += 26
              else
                terminal_parse_failure("Headers should not include")
                r7 = nil
              end
              if r7
                r1 = r7
              else
                @index = i1
                r1 = nil
              end
            end
          end
        end
      end
    end
    s0 << r1
    if r1
      r8 = _nt_space
      s0 << r8
      if r8
        r9 = _nt_parameter
        s0 << r9
      end
    end
    if s0.last
      r0 = instantiate_node(SimpleAssertion,input, i0...index, s0)
      r0.extend(SimpleAssertion0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:simple_assertion][start_index] = r0

    r0
  end

  def _nt_complex_assertion
    start_index = index
    if node_cache[:complex_assertion].has_key?(index)
      cached = node_cache[:complex_assertion][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_header_contents
    if r1
      r0 = r1
      r0.extend(ComplexAssertion)
    else
      r2 = _nt_response_code
      if r2
        r0 = r2
        r0.extend(ComplexAssertion)
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:complex_assertion][start_index] = r0

    r0
  end

  module ResponseCode0
  end

  module ResponseCode1
    def space1
      elements[1]
    end

    def space2
      elements[3]
    end

  end

  def _nt_response_code
    start_index = index
    if node_cache[:response_code].has_key?(index)
      cached = node_cache[:response_code][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?("Response code should be", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 23))
      @index += 23
    else
      terminal_parse_failure("Response code should be")
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?("Response code should not be", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 27))
        @index += 27
      else
        terminal_parse_failure("Response code should not be")
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r4 = _nt_space
      s0 << r4
      if r4
        i5 = index
        r6 = _nt_quoted_value
        if r6
          r5 = r6
        else
          r7 = _nt_regex
          if r7
            r5 = r7
          else
            r8 = _nt_name
            if r8
              r5 = r8
            else
              r9 = _nt_http_code
              if r9
                r5 = r9
              else
                @index = i5
                r5 = nil
              end
            end
          end
        end
        s0 << r5
        if r5
          r10 = _nt_space
          s0 << r10
          if r10
            i12, s12 = index, []
            if has_terminal?('after redirect', false, index)
              r13 = instantiate_node(SyntaxNode,input, index...(index + 14))
              @index += 14
            else
              terminal_parse_failure('after redirect')
              r13 = nil
            end
            s12 << r13
            if r13
              if has_terminal?('s', false, index)
                r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('s')
                r15 = nil
              end
              if r15
                r14 = r15
              else
                r14 = instantiate_node(SyntaxNode,input, index...index)
              end
              s12 << r14
            end
            if s12.last
              r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
              r12.extend(ResponseCode0)
            else
              @index = i12
              r12 = nil
            end
            if r12
              r11 = r12
            else
              r11 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r11
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(ResponseCode,input, i0...index, s0)
      r0.extend(ResponseCode1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:response_code][start_index] = r0

    r0
  end

  module HeaderContents0
    def identifier
      elements[1]
    end

    def space1
      elements[2]
    end

    def space2
      elements[4]
    end

    def parameter
      elements[5]
    end
  end

  def _nt_header_contents
    start_index = index
    if node_cache[:header_contents].has_key?(index)
      cached = node_cache[:header_contents][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("Header ", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure("Header ")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_identifier
      s0 << r2
      if r2
        r3 = _nt_space
        s0 << r3
        if r3
          i4 = index
          if has_terminal?("should contain", false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 14))
            @index += 14
          else
            terminal_parse_failure("should contain")
            r5 = nil
          end
          if r5
            r4 = r5
          else
            if has_terminal?("should not contain", false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 18))
              @index += 18
            else
              terminal_parse_failure("should not contain")
              r6 = nil
            end
            if r6
              r4 = r6
            else
              @index = i4
              r4 = nil
            end
          end
          s0 << r4
          if r4
            r7 = _nt_space
            s0 << r7
            if r7
              r8 = _nt_parameter
              s0 << r8
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(HeaderContents,input, i0...index, s0)
      r0.extend(HeaderContents0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:header_contents][start_index] = r0

    r0
  end

  def _nt_parameter
    start_index = index
    if node_cache[:parameter].has_key?(index)
      cached = node_cache[:parameter][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_escaped_value
    if r1
      r0 = r1
      r0.extend(Param)
    else
      r2 = _nt_quoted_value
      if r2
        r0 = r2
        r0.extend(Param)
      else
        r3 = _nt_name
        if r3
          r0 = r3
          r0.extend(Param)
        else
          r4 = _nt_regex
          if r4
            r0 = r4
            r0.extend(Param)
          else
            r5 = _nt_value
            if r5
              r0 = r5
              r0.extend(Param)
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:parameter][start_index] = r0

    r0
  end

  def _nt_value
    start_index = index
    if node_cache[:value].has_key?(index)
      cached = node_cache[:value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[^\\n]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(Value,input, i0...index, s0)

    node_cache[:value][start_index] = r0

    r0
  end

  def _nt_required_value
    start_index = index
    if node_cache[:required_value].has_key?(index)
      cached = node_cache[:required_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[^\\n]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(RequiredValue,input, i0...index, s0)
    end

    node_cache[:required_value][start_index] = r0

    r0
  end

  module QuotedValue0
  end

  def _nt_quoted_value
    start_index = index
    if node_cache[:quoted_value].has_key?(index)
      cached = node_cache[:quoted_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('"', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('"')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        if has_terminal?('\"', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('\"')
          r4 = nil
        end
        if r4
          r3 = r4
        else
          if has_terminal?('\G[^"]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        if has_terminal?('"', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r6 = nil
        end
        s0 << r6
      end
    end
    if s0.last
      r0 = instantiate_node(QuotedValue,input, i0...index, s0)
      r0.extend(QuotedValue0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:quoted_value][start_index] = r0

    r0
  end

  def _nt_http_code
    start_index = index
    if node_cache[:http_code].has_key?(index)
      cached = node_cache[:http_code][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(HttpCode,input, i0...index, s0)
    end

    node_cache[:http_code][start_index] = r0

    r0
  end

  module Regex0
  end

  def _nt_regex
    start_index = index
    if node_cache[:regex].has_key?(index)
      cached = node_cache[:regex][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('/', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('/')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        if has_terminal?('\/', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('\/')
          r4 = nil
        end
        if r4
          r3 = r4
        else
          if has_terminal?('\G[^/]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        if has_terminal?('/', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('/')
          r6 = nil
        end
        s0 << r6
      end
    end
    if s0.last
      r0 = instantiate_node(Regex,input, i0...index, s0)
      r0.extend(Regex0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:regex][start_index] = r0

    r0
  end

  module Comment0
    def space
      elements[0]
    end

  end

  def _nt_comment
    start_index = index
    if node_cache[:comment].has_key?(index)
      cached = node_cache[:comment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      r2 = _nt_space
      s1 << r2
      if r2
        if has_terminal?('#', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('#')
          r3 = nil
        end
        s1 << r3
        if r3
          s4, i4 = [], index
          loop do
            if has_terminal?('\G[^\\n]', true, index)
              r5 = true
              @index += 1
            else
              r5 = nil
            end
            if r5
              s4 << r5
            else
              break
            end
          end
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          s1 << r4
        end
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(Comment0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(Comment,input, i0...index, s0)

    node_cache[:comment][start_index] = r0

    r0
  end

  module EscapedValue0
  end

  def _nt_escaped_value
    start_index = index
    if node_cache[:escaped_value].has_key?(index)
      cached = node_cache[:escaped_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('::', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('::')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[^\\n]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(EscapedValue,input, i0...index, s0)
      r0.extend(EscapedValue0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:escaped_value][start_index] = r0

    r0
  end

  module Name0
    def identifier
      elements[1]
    end
  end

  def _nt_name
    start_index = index
    if node_cache[:name].has_key?(index)
      cached = node_cache[:name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(':', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(':')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_identifier
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Name,input, i0...index, s0)
      r0.extend(Name0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:name][start_index] = r0

    r0
  end

  def _nt_identifier
    start_index = index
    if node_cache[:identifier].has_key?(index)
      cached = node_cache[:identifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[a-zA-Z0-9_-]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Identifier,input, i0...index, s0)
    end

    node_cache[:identifier][start_index] = r0

    r0
  end

  module Url0
  end

  def _nt_url
    start_index = index
    if node_cache[:url].has_key?(index)
      cached = node_cache[:url][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('http://', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('http://')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('https://', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 8))
        @index += 8
      else
        terminal_parse_failure('https://')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      s4, i4 = [], index
      loop do
        if has_terminal?('\G[a-zA-Z0-9]', true, index)
          r5 = true
          @index += 1
        else
          r5 = nil
        end
        if r5
          s4 << r5
        else
          break
        end
      end
      if s4.empty?
        @index = i4
        r4 = nil
      else
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      end
      s0 << r4
      if r4
        s6, i6 = [], index
        loop do
          if has_terminal?('\G[^\\n\\s]', true, index)
            r7 = true
            @index += 1
          else
            r7 = nil
          end
          if r7
            s6 << r7
          else
            break
          end
        end
        if s6.empty?
          @index = i6
          r6 = nil
        else
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        end
        s0 << r6
      end
    end
    if s0.last
      r0 = instantiate_node(Url,input, i0...index, s0)
      r0.extend(Url0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:url][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[\\s\\t]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(Space,input, i0...index, s0)

    node_cache[:space][start_index] = r0

    r0
  end

end

class TesterGrammarParser < Treetop::Runtime::CompiledParser
  include TesterGrammar
end


