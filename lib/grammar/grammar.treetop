grammar TesterGrammar

  rule test_file
    comment* space test_group+ space {
      def process
        elements[2].elements.collect{|e| e.process}
      end
    }
  end

  rule test_group
    comment* on_clause comment* first_clause? comment* finally_clause? comment* test_line+ comment* {
      def process
        results = {
          :test_url => on_clause.url.text_value.strip,
          :tests => elements[7].elements.collect{|e| e.process}
        }

        results[:first] = elements[3].url.text_value.strip if !elements[3].empty?
        results[:finally] = elements[5].url.text_value.strip if !elements[5].empty?

        results
      end
    }
  end

  rule on_clause
    space "On " url comment* newline 
  end

  rule first_clause
    space "First, fetch " url comment* newline
  end

  rule finally_clause
    space "Finally, fetch " url comment* newline
  end

  rule test_line
    comment* space test comment* newline {
      def process
        test.process
      end
    }
  end
 
  rule test
    assertion space (escaped_value / name / value) {
      def process
        hash = {
          :assertion => assertion.text_value.to_test_sym,
          :original_line => text_value
        }

        if elements[2].text_value.match(/^:/)
          if elements[2].text_value.match(/^::/)
            hash[:value] = elements[2].text_value.gsub(/^::/, ':').strip
          else
            hash[:name] = elements[2].text_value.strip
          end
        else
          hash[:value] = elements[2].text_value.strip
        end

        hash
      end
    }
  end

  rule assertion
    "Source should contain" / "Source should not contain" / 
    "I should see" / "I should not see" / 
    "Headers should include" / "Headers should not include"
  end

  rule newline
    [\r\n]+ 
  end
  
  rule value
    [^\n]*
  end

  rule comment
    space '#' [^\n]*
  end

  rule escaped_value
    '::' [^\n]*
  end

  rule name
    ':' [a-zA-Z0-9_]*
  end

  rule url
    ('http://' / 'https://') [^\n]+
  end

  rule space
    [\s\t]*  
  end
end

