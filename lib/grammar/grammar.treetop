grammar TesterGrammar
  rule test_file
    comment* space test_group+ space {
      def process
        elements[2].elements.collect{|e| e.process}
      end
    }
  end

  rule test_group
    comment* page_clause comment* first_clause? comment* finally_clause? comment* test_line+ comment* {
      def process
        results = {
          :test_page => page_clause.process,
          :tests => elements[7].elements.collect{|e| e.process}
        }

        results[:first] = elements[3].url.text_value.strip if !elements[3].empty?
        results[:finally] = elements[5].url.text_value.strip if !elements[5].empty?

        results
      end
    }
  end

  rule on_clause
    "On" space url {
      def process
      {
        :method => :get,
        :data => '',
        :url => url.text_value.strip
      }
      end
    }
  end

  rule when_clause
    "When I post" space data space "to" space url {
      def process
      {
        :method => :post,
        :data => data.process,
        :url => url.text_value.strip
      }
      end
    }
  end

  rule page_clause
    space so_clause? (on_clause / when_clause) comment* newline {
      def process
        elements[2].process.merge({:so => elements[1].text_value.strip})
      end
    }
  end

  rule so_clause
    "So" value newline
  end

  rule first_clause
    space "First, fetch " url 
  end

  rule finally_clause
    space "Finally, fetch " url comment* newline
  end

  rule test_line
    comment* space test comment* newline {
      def process
        test.process
      end
    }
  end
 
  rule test
    (complex_assertion / simple_assertion) space parameter {
      def process
        hash = elements[0].process

        hash[:original_line] = text_value

        if parameter.text_value.match(/^:/)
          if parameter.text_value.match(/^::/)
            hash[:value] = parameter.text_value.gsub(/^::/, ':').strip
          else
            hash[:name] = parameter.text_value.strip
          end
        else
          hash[:value] = parameter.text_value.strip

          if matches = hash[:value].match(/"([^"]+)"/)
            hash[:value] = matches[1]
          end

          if matches = hash[:value][0] == '/' && hash[:value][-1] == '/'
            hash[:value] = Regexp.new(hash[:value][1..-2])
          end
        end

        hash
      end
    }
  end

  rule simple_assertion
    ("Source should contain" / "Source should not contain" / "I should see" / "I should not see" / "Headers should include" / "Headers should not include") {
      def process
      {:assertion => text_value.to_test_sym}
      end
    }
  end

  rule complex_assertion
    "Header" space identifier space ("should contain" / "should not contain") {
      def process 
        {
          :header => identifier.text_value.strip,
          :assertion => elements[4].text_value.to_test_sym
        }
      end
    }
  end

  rule parameter
    (escaped_value / name / regex / value)
  end

  rule newline
    [\r\n]+ 
  end
  
  rule value
    [^\n]*
  end

  rule data
    '"' [^"]+ '"' {
      def process
        elements[1].text_value
      end
    }
  end

  rule regex
    '/' [^\/]+ '/'
  end

  rule comment
    space '#' [^\n]*
  end

  rule escaped_value
    '::' [^\n]*
  end

  rule name
    ':' identifier
  end

  rule identifier
    [a-zA-Z0-9_-]+
  end

  rule url
    ('http://' / 'https://') ([a-zA-Z0-9]+ [^\n\s]+)
  end

  rule space
    [\s\t]*  
  end
end

